<?php

require_once './vendor/firebase/php-jwt/src/BeforeValidException.php';
require_once './vendor/firebase/php-jwt/src/ExpiredException.php';
require_once './vendor/firebase/php-jwt/src/SignatureInvalidException.php';
require_once './vendor/firebase/php-jwt/src/JWT.php';
require_once './vendor/firebase/php-jwt/src/Key.php';
use Firebase\JWT\JWT;
use Firebase\JWT\Key;

class helper_api
{
    private $key = "secret";

    public function createJWT($data)
    {
        $waktuRequest = time();
        $waktuToken = 3600;
        $waktuExpired = $waktuRequest + $waktuToken;
        
        $data_JWT = [
            "exp" => $waktuExpired,
            "iat" => $waktuRequest,
            "data" => $data
        ];

        $JWT = JWT::encode($data_JWT, $this->key, 'HS256');
        return $JWT;
    }

    public function CheckJWT()
    {   
        if(!isset(getallheaders()['Authorization'])){
            $arr = [
                "resp"      => 0,
                "message"   => "No JWT Token"
            ];
            return $arr;
        }

        $JWT = explode(" ",  getallheaders()['Authorization'])[1];
        
        try{
            $JWT = JWT::decode($JWT, new Key ($this->key,'HS256'));
        }catch(Exception $e){
            $arr = [
                "resp"      => 0,
                "message"   => $e->getMessage()
            ];
            return $arr;
        }
        $arr = [
            "resp"      => 1,
            "JWT"       => (array)$JWT
        ];
        return $arr;
    }
    public function getPost($parameter = NULL)
    {
        if($parameter == NULL){
            $data = [];
            foreach ($_POST as $key => $value) {
                $data[$key] = $value;
            }
            return $data;
        }else{
            if(!isset($_POST[$parameter])) 
                return 0;
            else 
                return $_POST[$parameter];
        }
    }
    public function getJSON($parameter = NULL)
    {
        $data = (array) json_decode(trim(file_get_contents("php://input", true)));
        if($parameter == NULL){
            return $data;
        }else{
            if(!isset($data[$parameter]))
                return 0;
            else
                return $data[$parameter]; 
        }
    }

    public function respond($status, $message)
    {
        $data = [
            "status"    => $status,
            "message"   => $message
        ];
        echo json_encode($data);
        return 0;
    }
}


?>